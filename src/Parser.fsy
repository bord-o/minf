%{

%}

// The start token becomes a parser function in the compiled code:
%start start

// Regular tokens
%token LET NUMBER ID EXPEND

// Misc tokens
%token EOF

// This is the type of the data produced by a successful reduction of the 'start'
// symbol:
%type <unit> start

%%

// These are the rules of the grammar along with the F# code of the 
// actions executed as rules are reduced.  
start: File end { $1 }
     | end      { $1 }

File:
	| ID File				{printfn "HELLO"; $2}
	| ID					{printfn "HELLO" } 


// Using F# keywords for nonterminal names is okay.
end: EOF { printfn "EOF" }
