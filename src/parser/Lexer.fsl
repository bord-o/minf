{

// Opens methods related to fslex.exe
open FSharp.Text.Lexing


let newline (lexbuf: LexBuffer<_>) = 
  lexbuf.StartPos <- lexbuf.StartPos.NextLine

}

// Regular expressions
let char        = ['a'-'z' 'A'-'Z']   
let digit       = ['0'-'9']   
let int         = digit+   
let whitespace  = [' ' '\t']   
let newline     = "\n\r" | '\n' | '\r'  

rule tokenstream = parse
| "let"			{ Parser.LET }
| "if"			{Parser.IF}
| "then"			{Parser.THEN}
| "else"			{Parser.ELSE}
| "is"				{Parser.IS}
| "fun"				{Parser.FUN}
| "true"			{Parser.TRUE}
| "false"			{Parser.FALSE}
| ":"				{Parser.COLON}
| "="			{ Parser.ASSIGN}

| char(char|digit)?+ { Parser.ID(LexBuffer<_>.LexemeString lexbuf)}
| int			{ Parser.NUMBER(System.Int32.Parse(LexBuffer<_>.LexemeString lexbuf))}
| ";;"			{ Parser.EXPEND}

| "+"			{Parser.PLUS}
| "-"			{Parser.MINUS}
| "*"			{Parser.TIMES}

| "<"			{Parser.LT}
| "<="			{Parser.LTE}
| ">"			{Parser.GT}
| ">="			{Parser.GTE}

| "("			{Parser.OPAREN}
| ")"			{Parser.CPAREN}

| whitespace	{ tokenstream lexbuf }
| newline	{ newline lexbuf; tokenstream lexbuf }
| eof   	{ Parser.EOF }

| _    		{ failwith ("ParseError" + LexBuffer<_>.LexemeString lexbuf) }
