// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "src/parser/Parser.fsy"

module A = Ast
let pp s = ignore s

# 11 "src/parser/Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | ID of (string)
  | NUMBER of (int)
  | LET
  | EXPEND
  | ASSIGN
  | OPAREN
  | CPAREN
  | IF
  | THEN
  | ELSE
  | IS
  | COLON
  | FUN
  | PLUS
  | MINUS
  | TIMES
  | LT
  | GT
  | LTE
  | GTE
  | TRUE
  | FALSE
  | NEQ
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_ID
    | TOKEN_NUMBER
    | TOKEN_LET
    | TOKEN_EXPEND
    | TOKEN_ASSIGN
    | TOKEN_OPAREN
    | TOKEN_CPAREN
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_IS
    | TOKEN_COLON
    | TOKEN_FUN
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_LT
    | TOKEN_GT
    | TOKEN_LTE
    | TOKEN_GTE
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_NEQ
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_stms
    | NONTERM_stm
    | NONTERM_dec
    | NONTERM_fun
    | NONTERM_fun_arg
    | NONTERM_exp
    | NONTERM_if_exp
    | NONTERM_call_exp
    | NONTERM_op_exp
    | NONTERM_number_lit
    | NONTERM_bool_lit
    | NONTERM_identifier_lit
    | NONTERM_end

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | ID _ -> 1 
  | NUMBER _ -> 2 
  | LET  -> 3 
  | EXPEND  -> 4 
  | ASSIGN  -> 5 
  | OPAREN  -> 6 
  | CPAREN  -> 7 
  | IF  -> 8 
  | THEN  -> 9 
  | ELSE  -> 10 
  | IS  -> 11 
  | COLON  -> 12 
  | FUN  -> 13 
  | PLUS  -> 14 
  | MINUS  -> 15 
  | TIMES  -> 16 
  | LT  -> 17 
  | GT  -> 18 
  | LTE  -> 19 
  | GTE  -> 20 
  | TRUE  -> 21 
  | FALSE  -> 22 
  | NEQ  -> 23 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_ID 
  | 2 -> TOKEN_NUMBER 
  | 3 -> TOKEN_LET 
  | 4 -> TOKEN_EXPEND 
  | 5 -> TOKEN_ASSIGN 
  | 6 -> TOKEN_OPAREN 
  | 7 -> TOKEN_CPAREN 
  | 8 -> TOKEN_IF 
  | 9 -> TOKEN_THEN 
  | 10 -> TOKEN_ELSE 
  | 11 -> TOKEN_IS 
  | 12 -> TOKEN_COLON 
  | 13 -> TOKEN_FUN 
  | 14 -> TOKEN_PLUS 
  | 15 -> TOKEN_MINUS 
  | 16 -> TOKEN_TIMES 
  | 17 -> TOKEN_LT 
  | 18 -> TOKEN_GT 
  | 19 -> TOKEN_LTE 
  | 20 -> TOKEN_GTE 
  | 21 -> TOKEN_TRUE 
  | 22 -> TOKEN_FALSE 
  | 23 -> TOKEN_NEQ 
  | 26 -> TOKEN_end_of_input
  | 24 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_start 
    | 3 -> NONTERM_stms 
    | 4 -> NONTERM_stms 
    | 5 -> NONTERM_stm 
    | 6 -> NONTERM_stm 
    | 7 -> NONTERM_dec 
    | 8 -> NONTERM_dec 
    | 9 -> NONTERM_fun 
    | 10 -> NONTERM_fun_arg 
    | 11 -> NONTERM_exp 
    | 12 -> NONTERM_exp 
    | 13 -> NONTERM_exp 
    | 14 -> NONTERM_exp 
    | 15 -> NONTERM_exp 
    | 16 -> NONTERM_exp 
    | 17 -> NONTERM_exp 
    | 18 -> NONTERM_if_exp 
    | 19 -> NONTERM_call_exp 
    | 20 -> NONTERM_op_exp 
    | 21 -> NONTERM_op_exp 
    | 22 -> NONTERM_op_exp 
    | 23 -> NONTERM_op_exp 
    | 24 -> NONTERM_op_exp 
    | 25 -> NONTERM_op_exp 
    | 26 -> NONTERM_op_exp 
    | 27 -> NONTERM_op_exp 
    | 28 -> NONTERM_op_exp 
    | 29 -> NONTERM_number_lit 
    | 30 -> NONTERM_bool_lit 
    | 31 -> NONTERM_bool_lit 
    | 32 -> NONTERM_identifier_lit 
    | 33 -> NONTERM_end 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 26 
let _fsyacc_tagOfErrorTerminal = 24

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | ID _ -> "ID" 
  | NUMBER _ -> "NUMBER" 
  | LET  -> "LET" 
  | EXPEND  -> "EXPEND" 
  | ASSIGN  -> "ASSIGN" 
  | OPAREN  -> "OPAREN" 
  | CPAREN  -> "CPAREN" 
  | IF  -> "IF" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | IS  -> "IS" 
  | COLON  -> "COLON" 
  | FUN  -> "FUN" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | LT  -> "LT" 
  | GT  -> "GT" 
  | LTE  -> "LTE" 
  | GTE  -> "GTE" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | NEQ  -> "NEQ" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUMBER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LET  -> (null : System.Object) 
  | EXPEND  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | OPAREN  -> (null : System.Object) 
  | CPAREN  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | IS  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | FUN  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LTE  -> (null : System.Object) 
  | GTE  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | NEQ  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;2us;65535us;0us;2us;5us;6us;2us;65535us;0us;5us;5us;5us;2us;65535us;0us;7us;5us;7us;1us;65535us;13us;15us;1us;65535us;17us;18us;18us;65535us;0us;9us;5us;9us;13us;14us;22us;23us;27us;28us;36us;37us;38us;39us;40us;41us;42us;43us;53us;44us;54us;45us;55us;46us;56us;47us;57us;48us;58us;49us;59us;50us;60us;51us;61us;52us;18us;65535us;0us;35us;5us;35us;13us;35us;22us;35us;27us;35us;36us;35us;38us;35us;40us;35us;42us;35us;53us;35us;54us;35us;55us;35us;56us;35us;57us;35us;58us;35us;59us;35us;60us;35us;61us;35us;18us;65535us;0us;34us;5us;34us;13us;34us;22us;34us;27us;34us;36us;34us;38us;34us;40us;34us;42us;34us;53us;34us;54us;34us;55us;34us;56us;34us;57us;34us;58us;34us;59us;34us;60us;34us;61us;34us;18us;65535us;0us;33us;5us;33us;13us;33us;22us;33us;27us;33us;36us;33us;38us;33us;40us;33us;42us;33us;53us;33us;54us;33us;55us;33us;56us;33us;57us;33us;58us;33us;59us;33us;60us;33us;61us;33us;18us;65535us;0us;30us;5us;30us;13us;30us;22us;30us;27us;30us;36us;30us;38us;30us;40us;30us;42us;30us;53us;30us;54us;30us;55us;30us;56us;30us;57us;30us;58us;30us;59us;30us;60us;30us;61us;30us;18us;65535us;0us;31us;5us;31us;13us;31us;22us;31us;27us;31us;36us;31us;38us;31us;40us;31us;42us;31us;53us;31us;54us;31us;55us;31us;56us;31us;57us;31us;58us;31us;59us;31us;60us;31us;61us;31us;18us;65535us;0us;32us;5us;32us;13us;32us;22us;32us;27us;32us;36us;32us;38us;32us;40us;32us;42us;32us;53us;32us;54us;32us;55us;32us;56us;32us;57us;32us;58us;32us;59us;32us;60us;32us;61us;32us;2us;65535us;0us;4us;2us;3us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;6us;9us;12us;14us;16us;35us;54us;73us;92us;111us;130us;149us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;1us;1us;1us;2us;2us;3us;4us;1us;3us;1us;5us;1us;5us;10us;6us;20us;21us;22us;23us;24us;25us;26us;27us;28us;1us;6us;2us;7us;8us;2us;7us;8us;2us;7us;8us;10us;7us;20us;21us;22us;23us;24us;25us;26us;27us;28us;1us;8us;1us;9us;1us;9us;1us;9us;1us;9us;1us;9us;1us;9us;1us;9us;10us;9us;20us;21us;22us;23us;24us;25us;26us;27us;28us;1us;10us;1us;10us;1us;10us;1us;11us;10us;11us;20us;21us;22us;23us;24us;25us;26us;27us;28us;1us;11us;1us;12us;1us;13us;1us;14us;1us;15us;1us;16us;1us;17us;1us;18us;10us;18us;20us;21us;22us;23us;24us;25us;26us;27us;28us;1us;18us;10us;18us;20us;21us;22us;23us;24us;25us;26us;27us;28us;1us;18us;10us;18us;20us;21us;22us;23us;24us;25us;26us;27us;28us;2us;19us;32us;10us;19us;20us;21us;22us;23us;24us;25us;26us;27us;28us;10us;20us;20us;21us;22us;23us;24us;25us;26us;27us;28us;10us;20us;21us;21us;22us;23us;24us;25us;26us;27us;28us;10us;20us;21us;22us;22us;23us;24us;25us;26us;27us;28us;10us;20us;21us;22us;23us;23us;24us;25us;26us;27us;28us;10us;20us;21us;22us;23us;24us;24us;25us;26us;27us;28us;10us;20us;21us;22us;23us;24us;25us;25us;26us;27us;28us;10us;20us;21us;22us;23us;24us;25us;26us;26us;27us;28us;10us;20us;21us;22us;23us;24us;25us;26us;27us;27us;28us;10us;20us;21us;22us;23us;24us;25us;26us;27us;28us;28us;1us;20us;1us;21us;1us;22us;1us;23us;1us;24us;1us;25us;1us;26us;1us;27us;1us;28us;1us;29us;1us;30us;1us;31us;1us;33us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;8us;10us;13us;15us;17us;19us;30us;32us;35us;38us;41us;52us;54us;56us;58us;60us;62us;64us;66us;68us;79us;81us;83us;85us;87us;98us;100us;102us;104us;106us;108us;110us;112us;114us;125us;127us;138us;140us;151us;154us;165us;176us;187us;198us;209us;220us;231us;242us;253us;264us;266us;268us;270us;272us;274us;276us;278us;280us;282us;284us;286us;288us;|]
let _fsyacc_action_rows = 66
let _fsyacc_actionTableElements = [|8us;32768us;0us;65us;1us;42us;2us;62us;3us;11us;6us;27us;8us;36us;21us;63us;22us;64us;0us;49152us;1us;32768us;0us;65us;0us;16385us;0us;16386us;7us;16388us;1us;42us;2us;62us;3us;11us;6us;27us;8us;36us;21us;63us;22us;64us;0us;16387us;1us;32768us;4us;8us;0us;16389us;10us;32768us;4us;10us;5us;56us;14us;53us;15us;54us;16us;55us;17us;58us;18us;60us;19us;59us;20us;61us;23us;57us;0us;16390us;1us;32768us;1us;12us;1us;32768us;5us;13us;7us;32768us;1us;42us;2us;62us;6us;27us;8us;36us;13us;16us;21us;63us;22us;64us;9us;16391us;5us;56us;14us;53us;15us;54us;16us;55us;17us;58us;18us;60us;19us;59us;20us;61us;23us;57us;0us;16392us;1us;32768us;6us;17us;1us;32768us;1us;24us;1us;32768us;7us;19us;1us;32768us;12us;20us;1us;32768us;1us;21us;1us;32768us;11us;22us;6us;32768us;1us;42us;2us;62us;6us;27us;8us;36us;21us;63us;22us;64us;9us;16393us;5us;56us;14us;53us;15us;54us;16us;55us;17us;58us;18us;60us;19us;59us;20us;61us;23us;57us;1us;32768us;12us;25us;1us;32768us;1us;26us;0us;16394us;6us;32768us;1us;42us;2us;62us;6us;27us;8us;36us;21us;63us;22us;64us;10us;32768us;5us;56us;7us;29us;14us;53us;15us;54us;16us;55us;17us;58us;18us;60us;19us;59us;20us;61us;23us;57us;0us;16395us;0us;16396us;0us;16397us;0us;16398us;0us;16399us;0us;16400us;0us;16401us;6us;32768us;1us;42us;2us;62us;6us;27us;8us;36us;21us;63us;22us;64us;10us;32768us;5us;56us;9us;38us;14us;53us;15us;54us;16us;55us;17us;58us;18us;60us;19us;59us;20us;61us;23us;57us;6us;32768us;1us;42us;2us;62us;6us;27us;8us;36us;21us;63us;22us;64us;10us;32768us;5us;56us;10us;40us;14us;53us;15us;54us;16us;55us;17us;58us;18us;60us;19us;59us;20us;61us;23us;57us;6us;32768us;1us;42us;2us;62us;6us;27us;8us;36us;21us;63us;22us;64us;9us;16402us;5us;56us;14us;53us;15us;54us;16us;55us;17us;58us;18us;60us;19us;59us;20us;61us;23us;57us;6us;16416us;1us;42us;2us;62us;6us;27us;8us;36us;21us;63us;22us;64us;1us;16403us;5us;56us;1us;16404us;5us;56us;1us;16405us;5us;56us;1us;16406us;5us;56us;1us;16407us;5us;56us;1us;16408us;5us;56us;1us;16409us;5us;56us;1us;16410us;5us;56us;1us;16411us;5us;56us;1us;16412us;5us;56us;6us;32768us;1us;42us;2us;62us;6us;27us;8us;36us;21us;63us;22us;64us;6us;32768us;1us;42us;2us;62us;6us;27us;8us;36us;21us;63us;22us;64us;6us;32768us;1us;42us;2us;62us;6us;27us;8us;36us;21us;63us;22us;64us;6us;32768us;1us;42us;2us;62us;6us;27us;8us;36us;21us;63us;22us;64us;6us;32768us;1us;42us;2us;62us;6us;27us;8us;36us;21us;63us;22us;64us;6us;32768us;1us;42us;2us;62us;6us;27us;8us;36us;21us;63us;22us;64us;6us;32768us;1us;42us;2us;62us;6us;27us;8us;36us;21us;63us;22us;64us;6us;32768us;1us;42us;2us;62us;6us;27us;8us;36us;21us;63us;22us;64us;6us;32768us;1us;42us;2us;62us;6us;27us;8us;36us;21us;63us;22us;64us;0us;16413us;0us;16414us;0us;16415us;0us;16417us;|]
let _fsyacc_actionTableRowOffsets = [|0us;9us;10us;12us;13us;14us;22us;23us;25us;26us;37us;38us;40us;42us;50us;60us;61us;63us;65us;67us;69us;71us;73us;80us;90us;92us;94us;95us;102us;113us;114us;115us;116us;117us;118us;119us;120us;127us;138us;145us;156us;163us;173us;180us;182us;184us;186us;188us;190us;192us;194us;196us;198us;200us;207us;214us;221us;228us;235us;242us;249us;256us;263us;264us;265us;266us;|]
let _fsyacc_reductionSymbolCounts = [|1us;2us;1us;2us;1us;2us;2us;4us;4us;8us;3us;3us;1us;1us;1us;1us;1us;1us;6us;2us;3us;3us;3us;3us;3us;3us;3us;3us;3us;1us;1us;1us;1us;1us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;1us;2us;2us;3us;3us;4us;4us;5us;6us;7us;7us;7us;7us;7us;7us;7us;8us;9us;10us;10us;10us;10us;10us;10us;10us;10us;10us;11us;12us;12us;13us;14us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;16385us;16386us;65535us;16387us;65535us;16389us;65535us;16390us;65535us;65535us;65535us;65535us;16392us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16394us;65535us;65535us;16395us;16396us;16397us;16398us;16399us;16400us;16401us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16413us;16414us;16415us;16417us;|]
let _fsyacc_reductions = lazy [|
# 251 "src/parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Ast.prog in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startstart));
# 260 "src/parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_stms in
            let _2 = parseState.GetInput(2) :?> 'gentype_end in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "src/parser/Parser.fsy"
                                       A.Prog(_1) 
                   )
# 33 "src/parser/Parser.fsy"
                 : Ast.prog));
# 272 "src/parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_end in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "src/parser/Parser.fsy"
                                       A.Blank 
                   )
# 34 "src/parser/Parser.fsy"
                 : Ast.prog));
# 283 "src/parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_stm in
            let _2 = parseState.GetInput(2) :?> 'gentype_stms in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "src/parser/Parser.fsy"
                                     pp "stms"; _1::_2
                   )
# 37 "src/parser/Parser.fsy"
                 : 'gentype_stms));
# 295 "src/parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_stm in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "src/parser/Parser.fsy"
                                _1::[]
                   )
# 38 "src/parser/Parser.fsy"
                 : 'gentype_stms));
# 306 "src/parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_dec in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "src/parser/Parser.fsy"
                                       pp "dec"; A.Dec(_1)
                   )
# 41 "src/parser/Parser.fsy"
                 : 'gentype_stm));
# 317 "src/parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "src/parser/Parser.fsy"
                                       pp "exp"; A.Exp(_1)
                   )
# 42 "src/parser/Parser.fsy"
                 : 'gentype_stm));
# 328 "src/parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "src/parser/Parser.fsy"
                                              pp "let"; A.VarDec(A.Val(_2), _4)
                   )
# 45 "src/parser/Parser.fsy"
                 : 'gentype_dec));
# 340 "src/parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_fun in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "src/parser/Parser.fsy"
                                              pp "fun"; A.FunDec(A.Fun(_2), _4)
                   )
# 46 "src/parser/Parser.fsy"
                 : 'gentype_dec));
# 352 "src/parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_fun_arg in
            let _6 = parseState.GetInput(6) :?> string in
            let _8 = parseState.GetInput(8) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "src/parser/Parser.fsy"
                                                                       pp "fun declaration"; {outtype=A.Ty(_6); arg= _3; body= _8} 
                   )
# 49 "src/parser/Parser.fsy"
                 : 'gentype_fun));
# 365 "src/parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "src/parser/Parser.fsy"
                                        pp "funarg"; {argname=A.Val(_1); type'=A.Ty(_3)}
                   )
# 52 "src/parser/Parser.fsy"
                 : 'gentype_fun_arg));
# 377 "src/parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "src/parser/Parser.fsy"
                                              _2
                   )
# 55 "src/parser/Parser.fsy"
                 : 'gentype_exp));
# 388 "src/parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_number_lit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "src/parser/Parser.fsy"
                                       _1
                   )
# 56 "src/parser/Parser.fsy"
                 : 'gentype_exp));
# 399 "src/parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_bool_lit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "src/parser/Parser.fsy"
                                     _1
                   )
# 57 "src/parser/Parser.fsy"
                 : 'gentype_exp));
# 410 "src/parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_identifier_lit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "src/parser/Parser.fsy"
                                           _1
                   )
# 58 "src/parser/Parser.fsy"
                 : 'gentype_exp));
# 421 "src/parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_op_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "src/parser/Parser.fsy"
                                   _1
                   )
# 59 "src/parser/Parser.fsy"
                 : 'gentype_exp));
# 432 "src/parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_call_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "src/parser/Parser.fsy"
                                     _1
                   )
# 60 "src/parser/Parser.fsy"
                 : 'gentype_exp));
# 443 "src/parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_if_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "src/parser/Parser.fsy"
                                   _1
                   )
# 61 "src/parser/Parser.fsy"
                 : 'gentype_exp));
# 454 "src/parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_exp in
            let _4 = parseState.GetInput(4) :?> 'gentype_exp in
            let _6 = parseState.GetInput(6) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "src/parser/Parser.fsy"
                                                     pp "if then else"; A.IfExp(_2, _4, _6)
                   )
# 64 "src/parser/Parser.fsy"
                 : 'gentype_if_exp));
# 467 "src/parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "src/parser/Parser.fsy"
                                   pp "function call"; A.CallExp(A.Fun(_1), _2)
                   )
# 67 "src/parser/Parser.fsy"
                 : 'gentype_call_exp));
# 479 "src/parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_exp in
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "src/parser/Parser.fsy"
                                         pp "plus"; A.OpExp(_1,A.Plus,_3)
                   )
# 70 "src/parser/Parser.fsy"
                 : 'gentype_op_exp));
# 491 "src/parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_exp in
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "src/parser/Parser.fsy"
                                          pp "minus"; A.OpExp(_1,A.Minus,_3)
                   )
# 71 "src/parser/Parser.fsy"
                 : 'gentype_op_exp));
# 503 "src/parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_exp in
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "src/parser/Parser.fsy"
                                          pp "times"; A.OpExp(_1,A.Times,_3)
                   )
# 72 "src/parser/Parser.fsy"
                 : 'gentype_op_exp));
# 515 "src/parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_exp in
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "src/parser/Parser.fsy"
                                           pp "equals"; A.OpExp(_1,A.Eq,_3)
                   )
# 74 "src/parser/Parser.fsy"
                 : 'gentype_op_exp));
# 527 "src/parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_exp in
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "src/parser/Parser.fsy"
                                        pp "neq"; A.OpExp(_1, A.Neq, _3)
                   )
# 75 "src/parser/Parser.fsy"
                 : 'gentype_op_exp));
# 539 "src/parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_exp in
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "src/parser/Parser.fsy"
                                       pp "lt"; A.OpExp(_1,A.LT,_3)
                   )
# 76 "src/parser/Parser.fsy"
                 : 'gentype_op_exp));
# 551 "src/parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_exp in
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "src/parser/Parser.fsy"
                                        pp "lte"; A.OpExp(_1,A.LTE,_3)
                   )
# 77 "src/parser/Parser.fsy"
                 : 'gentype_op_exp));
# 563 "src/parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_exp in
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "src/parser/Parser.fsy"
                                       pp "gt"; A.OpExp(_1,A.GT,_3)
                   )
# 78 "src/parser/Parser.fsy"
                 : 'gentype_op_exp));
# 575 "src/parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_exp in
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "src/parser/Parser.fsy"
                                        pp "gte"; A.OpExp(_1,A.GTE,_3)
                   )
# 79 "src/parser/Parser.fsy"
                 : 'gentype_op_exp));
# 587 "src/parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "src/parser/Parser.fsy"
                                   pp "number"; A.NumExp(_1)
                   )
# 82 "src/parser/Parser.fsy"
                 : 'gentype_number_lit));
# 598 "src/parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "src/parser/Parser.fsy"
                                 pp "true"; A.BoolExp(true)
                   )
# 85 "src/parser/Parser.fsy"
                 : 'gentype_bool_lit));
# 608 "src/parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "src/parser/Parser.fsy"
                                  pp "true"; A.BoolExp(false)
                   )
# 86 "src/parser/Parser.fsy"
                 : 'gentype_bool_lit));
# 618 "src/parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "src/parser/Parser.fsy"
                               pp "identifier"; A.IdExp(A.Val(_1))
                   )
# 89 "src/parser/Parser.fsy"
                 : 'gentype_identifier_lit));
# 629 "src/parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "src/parser/Parser.fsy"
                                
                   )
# 93 "src/parser/Parser.fsy"
                 : 'gentype_end));
|]
# 640 "src/parser/Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 27;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : Ast.prog =
    engine lexer lexbuf 0 :?> _
