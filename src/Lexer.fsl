{

// Opens methods related to fslex.exe
open FSharp.Text.Lexing

let newline (lexbuf: LexBuffer<_>) = 
  lexbuf.StartPos <- lexbuf.StartPos.NextLine

}

// Regular expressions
let char        = ['a'-'z' 'A'-'Z']   
let digit       = ['0'-'9']   
let int         = '-'?digit+   
let whitespace  = [' ' '\t']   
let newline     = "\n\r" | '\n' | '\r'  

rule tokenstream = parse
| "let"			{ Parser.LET }
| int			{ Parser.NUMBER}
| (char|digit)+ { Parser.ID}
| ";;"			{ Parser.EXPEND}

| whitespace	{ tokenstream lexbuf }
| newline	{ newline lexbuf; tokenstream lexbuf }
| eof   	{ Parser.EOF }

| _    		{ failwith ("ParseError" + LexBuffer<_>.LexemeString lexbuf) }
